// Code generated by MockGen. DO NOT EDIT.
// Source: goresource/store (interfaces: Store)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	url "net/url"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockStore) Close() {
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockStoreMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStore)(nil).Close))
}

// CreateEntity mocks base method
func (m *MockStore) CreateEntity(arg0 string, arg1, arg2 interface{}) error {
	ret := m.ctrl.Call(m, "CreateEntity", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEntity indicates an expected call of CreateEntity
func (mr *MockStoreMockRecorder) CreateEntity(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntity", reflect.TypeOf((*MockStore)(nil).CreateEntity), arg0, arg1, arg2)
}

// DeleteEntity mocks base method
func (m *MockStore) DeleteEntity(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "DeleteEntity", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEntity indicates an expected call of DeleteEntity
func (mr *MockStoreMockRecorder) DeleteEntity(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntity", reflect.TypeOf((*MockStore)(nil).DeleteEntity), arg0, arg1)
}

// GetEntity mocks base method
func (m *MockStore) GetEntity(arg0, arg1 string, arg2 interface{}) error {
	ret := m.ctrl.Call(m, "GetEntity", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetEntity indicates an expected call of GetEntity
func (mr *MockStoreMockRecorder) GetEntity(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntity", reflect.TypeOf((*MockStore)(nil).GetEntity), arg0, arg1, arg2)
}

// ListEntities mocks base method
func (m *MockStore) ListEntities(arg0 string, arg1 url.Values, arg2 interface{}) error {
	ret := m.ctrl.Call(m, "ListEntities", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEntities indicates an expected call of ListEntities
func (mr *MockStoreMockRecorder) ListEntities(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntities", reflect.TypeOf((*MockStore)(nil).ListEntities), arg0, arg1, arg2)
}

// UpdateEntity mocks base method
func (m *MockStore) UpdateEntity(arg0, arg1 string, arg2, arg3 interface{}) error {
	ret := m.ctrl.Call(m, "UpdateEntity", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEntity indicates an expected call of UpdateEntity
func (mr *MockStoreMockRecorder) UpdateEntity(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEntity", reflect.TypeOf((*MockStore)(nil).UpdateEntity), arg0, arg1, arg2, arg3)
}
