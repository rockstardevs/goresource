// Code generated by MockGen. DO NOT EDIT.
// Source: goresource (interfaces: ResourceManager)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	goresource "goresource"
	io "io"
	url "net/url"
	reflect "reflect"
)

// MockResourceManager is a mock of ResourceManager interface
type MockResourceManager struct {
	ctrl     *gomock.Controller
	recorder *MockResourceManagerMockRecorder
}

// MockResourceManagerMockRecorder is the mock recorder for MockResourceManager
type MockResourceManagerMockRecorder struct {
	mock *MockResourceManager
}

// NewMockResourceManager creates a new mock instance
func NewMockResourceManager(ctrl *gomock.Controller) *MockResourceManager {
	mock := &MockResourceManager{ctrl: ctrl}
	mock.recorder = &MockResourceManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResourceManager) EXPECT() *MockResourceManagerMockRecorder {
	return m.recorder
}

// CreateEntity mocks base method
func (m *MockResourceManager) CreateEntity(arg0 goresource.Entity, arg1 url.Values) (interface{}, error) {
	ret := m.ctrl.Call(m, "CreateEntity", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEntity indicates an expected call of CreateEntity
func (mr *MockResourceManagerMockRecorder) CreateEntity(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntity", reflect.TypeOf((*MockResourceManager)(nil).CreateEntity), arg0, arg1)
}

// DeleteEntity mocks base method
func (m *MockResourceManager) DeleteEntity(arg0 string, arg1 url.Values) error {
	ret := m.ctrl.Call(m, "DeleteEntity", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEntity indicates an expected call of DeleteEntity
func (mr *MockResourceManagerMockRecorder) DeleteEntity(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntity", reflect.TypeOf((*MockResourceManager)(nil).DeleteEntity), arg0, arg1)
}

// GetEntity mocks base method
func (m *MockResourceManager) GetEntity(arg0 string, arg1 url.Values) (interface{}, error) {
	ret := m.ctrl.Call(m, "GetEntity", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntity indicates an expected call of GetEntity
func (mr *MockResourceManagerMockRecorder) GetEntity(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntity", reflect.TypeOf((*MockResourceManager)(nil).GetEntity), arg0, arg1)
}

// GetName mocks base method
func (m *MockResourceManager) GetName() string {
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockResourceManagerMockRecorder) GetName() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockResourceManager)(nil).GetName))
}

// ListEntities mocks base method
func (m *MockResourceManager) ListEntities(arg0 url.Values) (interface{}, error) {
	ret := m.ctrl.Call(m, "ListEntities", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntities indicates an expected call of ListEntities
func (mr *MockResourceManagerMockRecorder) ListEntities(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntities", reflect.TypeOf((*MockResourceManager)(nil).ListEntities), arg0)
}

// New mocks base method
func (m *MockResourceManager) New() goresource.Entity {
	ret := m.ctrl.Call(m, "New")
	ret0, _ := ret[0].(goresource.Entity)
	return ret0
}

// New indicates an expected call of New
func (mr *MockResourceManagerMockRecorder) New() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockResourceManager)(nil).New))
}

// ParseJSON mocks base method
func (m *MockResourceManager) ParseJSON(arg0 io.ReadCloser) (goresource.Entity, error) {
	ret := m.ctrl.Call(m, "ParseJSON", arg0)
	ret0, _ := ret[0].(goresource.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseJSON indicates an expected call of ParseJSON
func (mr *MockResourceManagerMockRecorder) ParseJSON(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseJSON", reflect.TypeOf((*MockResourceManager)(nil).ParseJSON), arg0)
}

// UpdateEntity mocks base method
func (m *MockResourceManager) UpdateEntity(arg0 string, arg1 goresource.Entity, arg2 url.Values) (interface{}, error) {
	ret := m.ctrl.Call(m, "UpdateEntity", arg0, arg1, arg2)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEntity indicates an expected call of UpdateEntity
func (mr *MockResourceManagerMockRecorder) UpdateEntity(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEntity", reflect.TypeOf((*MockResourceManager)(nil).UpdateEntity), arg0, arg1, arg2)
}
